import tkinter as tk
import random

class GomokuGame:
    def __init__(self, root):
        self.root = root
        self.root.title("五子棋遊戲")
        self.board_size = 15  # 棋盤大小
        self.cell_size = 40   # 每個格子的大小
        self.board = [[0] * self.board_size for _ in range(self.board_size)]  # 0 = 空, 1 = 玩家, 2 = 電腦
        self.current_player = 1  # 1 = 玩家, 2 = 電腦
        self.game_over = False
        self.canvas = tk.Canvas(root, width=self.board_size * self.cell_size, height=self.board_size * self.cell_size)
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.player_move)
        self.draw_board()

    def draw_board(self):
        self.canvas.delete("all")
        # 畫格子
        for i in range(self.board_size):
            self.canvas.create_line(i * self.cell_size, 0, i * self.cell_size, self.board_size * self.cell_size, fill="black")
            self.canvas.create_line(0, i * self.cell_size, self.board_size * self.cell_size, i * self.cell_size, fill="black")
        
        # 畫棋子
        for y in range(self.board_size):
            for x in range(self.board_size):
                if self.board[y][x] == 1:  # 玩家
                    self.draw_piece(x, y, "black")
                elif self.board[y][x] == 2:  # 電腦
                    self.draw_piece(x, y, "white")

    def draw_piece(self, x, y, color):
        self.canvas.create_oval(x * self.cell_size + 5, y * self.cell_size + 5, 
                                (x + 1) * self.cell_size - 5, (y + 1) * self.cell_size - 5,
                                fill=color)

    def player_move(self, event):
        if self.game_over:
            return
        
        x, y = event.x // self.cell_size, event.y // self.cell_size
        if self.board[y][x] == 0:
            self.board[y][x] = 1  # 玩家下棋
            self.draw_board()
            if self.check_win(1):
                self.game_over = True
                self.canvas.create_text(self.board_size * self.cell_size // 2, self.board_size * self.cell_size // 2, 
                                        text="玩家獲勝！", font=("Arial", 24), fill="black")
                return
            self.current_player = 2
            self.computer_move()

    def computer_move(self):
        if self.game_over:
            return
        
        x, y = self.best_move()
        self.board[y][x] = 2  # 電腦下棋
        self.draw_board()
        if self.check_win(2):
            self.game_over = True
            self.canvas.create_text(self.board_size * self.cell_size // 2, self.board_size * self.cell_size // 2, 
                                    text="電腦獲勝！", font=("Arial", 24), fill="black")
            return
        self.current_player = 1

    def best_move(self):
        # 隨機選擇一個空格進行模擬的簡單 AI
        empty_cells = [(x, y) for x in range(self.board_size) for y in range(self.board_size) if self.board[y][x] == 0]
        return random.choice(empty_cells)

    def check_win(self, player):
        for y in range(self.board_size):
            for x in range(self.board_size):
                if self.board[y][x] == player:
                    if self.check_direction(x, y, 1, 0, player) or \
                       self.check_direction(x, y, 0, 1, player) or \
                       self.check_direction(x, y, 1, 1, player) or \
                       self.check_direction(x, y, 1, -1, player):
                        return True
        return False

    def check_direction(self, x, y, dx, dy, player):
        count = 0
        for i in range(5):
            nx, ny = x + dx * i, y + dy * i
            if 0 <= nx < self.board_size and 0 <= ny < self.board_size and self.board[ny][nx] == player:
                count += 1
            else:
                break
        return count == 5


if __name__ == "__main__":
    root = tk.Tk()
    game = GomokuGame(root)
    root.mainloop()
